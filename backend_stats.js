/**
all stats required by backend is generated by these shole bot.
**/
/////THE MODULES/////////
var fs = require('fs');
var path = require('path');
var config = require('./config').config;
var xmlparser = require('xml2json');
var master = require('./libs/master');
var async = require('async');
var mysql = require('mysql');
var util = require('util');
var argv = require('optimist').argv;
var S = require('string');
/////DECLARATIONS/////////
var FILE_PREFIX = config.updater_file_prefix+config.competition.id+'-'+config.competition.year;
var stat_maps = require('./libs/stats_map').getStats();
var frontend_schema = config.database.frontend_schema;

var http = require('http');


var match_results = require('./libs/match_results_dummy');
var lineup_stats = require('./libs/gamestats/lineup_stats.worker');
var business_stats = require('./libs/gamestats/business_stats');
var ranks = require(path.resolve('./libs/gamestats/ranks'));

/////THE LOGICS///////////////
var pool  = mysql.createPool({
   host     : config.database.host,
   user     : config.database.username,
   password : config.database.password,
});

var start = 0;
var limit = 100;//we deal with 100 teams at a time
var doLoop = true;
pool.getConnection(function(err,conn){
	async.waterfall([
		function(cb){
			async.doWhilst(
			function(callback){
					conn.query("SELECT a.id as team_id,b.fb_id FROM "+frontend_schema+".teams a \
								INNER JOIN "+frontend_schema+".users b\
								ON a.user_id = b.id \
								LIMIT ?,?",
						[start,limit],
						function(err,rs){
							conn.end(function(e){
								if(rs.length>0){
									populate(rs,function(err){
										start+=limit;
										callback();
									});
								}else{
									doLoop=false;
									callback();
								}
							});
							
					});
				}, function(){
					return doLoop;
				}, function(err){
				cb(err);
			});
		},
		
	],
	function(err){
		pool.end(function(err){
			console.log('pool closed');
		});
	});
	
});
function populate(users,done){
	pool.getConnection(function(err,conn){
		async.waterfall([
			function(callback){
				conn.query("SELECT * FROM ffgame.game_matchstats_modifier Modifier LIMIT 100",
						[],
						function(err,rs){
							var modifier = [];
							for(var i in rs){
								modifier[rs[i].name] = {
									goalkeeper: rs[i].g,
									defender: rs[i].d,
									midfielder: rs[i].m,
									forward: rs[i].f
								}
							}
							callback(err,modifier);
						});
			},
			function(modifier,callback){
				async.eachSeries(users,function(user,next){
					generate_summary(conn,user,modifier,function(err){
						next();
					});
				},function(err){
					callback(err);
				});
			}
		],
		function(err){
			conn.end(function(e){
				console.log('close connection');
				done(err);
			});
		});
		
	});
}
function generate_summary(conn,user,modifier,done){
	async.waterfall([
		function(callback){
			conn.query("SELECT GameTeam.id AS game_team_id FROM ffgame.game_users GameUser\
                              INNER JOIN ffgame.game_teams GameTeam\
                              ON GameTeam.user_id = GameUser.id\
                              WHERE GameUser.fb_id = ? LIMIT 1",
                          [user.fb_id],function(err,rs){
                          //	console.log(rs);
	                          try{
	                          	callback(err,rs[0].game_team_id);
	                          }catch(e){
	                          	callback(e,0);
	                          }
                          	
                          });
		},
		function(game_team_id,callback){
			console.log('Game-team_id',game_team_id);
			if(game_team_id!=null){
				conn.query("SELECT SUM(start_budget+transactions) AS balance FROM \
                                (SELECT budget AS start_budget,0 AS transactions\
                                FROM ffgame.game_team_purse WHERE game_team_id=? LIMIT 1\
                                UNION ALL\
                                SELECT 0,SUM(amount) AS transactions\
                                FROM ffgame.game_team_expenditures\
                                WHERE game_team_id=?\
                                ) Finance;",
						[game_team_id,game_team_id],
						function(err,rs){
							//console.log(S(this.sql).collapseWhitespace().s);
							//console.log(rs);
							callback(err,game_team_id,rs[0].balance);
						});
			}else{
				callback(new Error('no game_team_id found'),0,0);
			}
			
		},
		function(game_team_id,money,callback){
			conn.query("SELECT game_team_id,COUNT(id) AS total \
                                  FROM ffgame.game_transfer_history \
                                  WHERE game_team_id = ?\
                                  AND transfer_type=1 LIMIT 10;",
                                  [game_team_id],
                                  function(err,rs){
                                  //	console.log(S(this.sql).collapseWhitespace().s);
                                  //	console.log(rs);
                                  	callback(err,game_team_id,money,rs[0].total);
                                  });
		},
		function(game_team_id,money,import_player_counts,callback){
			getStatsGroupValues(conn,game_team_id,modifier,function(err,rs){
				callback(err,game_team_id,money,import_player_counts,rs);
			});
		},
		function(game_team_id,money,import_player_counts,statsgroup,callback){
			conn.query("INSERT INTO "+frontend_schema+".team_summary\
                      (game_team_id,money,import_player_counts,games,passing_and_attacking,\
                      	defending,goalkeeping,mistakes_and_errors,last_update)\
                      VALUES\
                      (?,\
                        ?,\
                        ?,\
                        ?,\
                        ?,\
                        ?,\
                        ?,\
                        ?,\
                        NOW())\
                      ON DUPLICATE KEY UPDATE\
                      money = VALUES(money),\
                      import_player_counts = VALUES(import_player_counts),\
                      games = VALUES(games),\
                      passing_and_attacking = VALUES(passing_and_attacking),\
                      defending = VALUES(defending),\
                      goalkeeping = VALUES(goalkeeping),\
                      mistakes_and_errors = VALUES(mistakes_and_errors),\
                      last_update = VALUES(last_update);",
                      [game_team_id,money,import_player_counts,statsgroup.games,statsgroup.passing_and_attacking,
                      statsgroup.defending,statsgroup.goalkeeper,statsgroup.mistakes_and_errors],
                      function(err,rs){
                      	//console.log(S(this.sql).collapseWhitespace().s);
                      	callback(err,rs);

			});
		}
	],
	function(err,rs){
		done(err,rs);
	});
}

function getStatsGroupValues(conn,game_team_id,modifier,done){

    var stats = {
    		games:0,
    		passing_and_attacking:0,
    		defending:0,
    		goalkeeper:0,
    		mistakes_and_errors:0
    	}

    conn.query("SELECT stats_category,SUM(points) as total\
    			FROM ffgame_stats.game_team_player_weekly \
    			WHERE game_team_id = ? GROUP BY stats_category;",
    			[game_team_id],
    			function(err,rs){
    				if(rs!=null&&rs.length>0){
    					for(var i in rs){
    						stats[rs[i].stats_category] = rs[i].total;
    					}	
    				}
    				done(err,stats);				
    			});
}
